# $File: setup.py $
# $LastChangedDate:  $
# $Rev:  $
# Copyright (c) 2012, Gao Wang <ewanggao@gmail.com>
# GNU General Public License (http://www.gnu.org/licenses/gpl.html)

from distutils.core import setup, Extension
try:
   from distutils.command.build_py import build_py_2to3 as build_py
except ImportError:
   from distutils.command.build_py import build_py
import sys, os
if sys.platform == "win32":
    sys.exit('Windows OS is not supported.')
    
SWIG_OPTS = ['-c++', '-python', '-O', '-shadow', '-keyword',
             '-w-511', '-w-509', '-outdir', '.']

if sys.version_info.major == 2:
    PYVERSION = 'py2'
else:
    SWIG_OPTS.append('-py3')
    PYVERSION = 'py3'
#
WRAPPER_CPP = 'libmped_{0}.cpp'.format(PYVERSION)
WRAPPER_PY = 'libmped_{0}.py'.format(PYVERSION)
WRAPPER_I = 'libmped.i'
#
HEADER =[
'libmped.i',
'libmerlin/loci.hpp',
'src/simulator/utils.hpp',
'src/simulator/sampler_ext.hpp'
]
CPP = [
'src/simulator/loci.cpp'
]
# generate wrapper files
try:
   import subprocess
   #
   ret = subprocess.call(['swig', '-python', '-external-runtime', 'swigpyrun.h'], shell=False)
   if ret != 0:
      sys.exit('Failed to generate swig runtime header file. Please install swig.')
   #
   if (not os.path.isfile(WRAPPER_PY) or not os.path.isfile(WRAPPER_CPP) or \
      os.path.getmtime(WRAPPER_CPP) < max([os.path.getmtime(x) for x in HEADER + FILES])):
        ret = subprocess.call(['swig'] + SWIG_OPTS + ['-o', WRAPPER_CPP, WRAPPER_I], shell=False)
        if ret != 0:
           sys.exit('Failed to generate libmped extension.')
        os.rename('libmped.py', WRAPPER_PY)
   #
except OSError as e:
   sys.exit('Failed to generate wrapper file: {0}'.format(e))

# Under linux/gcc, lib stdc++ is needed for C++ based extension.
libs = ['stdc++'] if sys.platform == 'linux2' else []
gccargs = ["-O3", "-march=native", "-std=c++11"]
LIBMPED_MODULE = [
    Extension('._libmped',
              sources = [WRAPPER_CPP] + CPP,
              extra_compile_args = gccargs,
              libraries = libs,
              library_dirs = [],
              include_dirs = [".", "src", "src/simulator", "gsl"])
              ]
   # ASSOC_MODULE = [
   #      Extension('spower.vat._assoTests',
   #          sources = [
   #              WRAPPER_ASSOC_CPP,
   #              ] + ASSOC_FILES + LIB_GSL,
   #          extra_compile_args = gccargs,
   #          library_dirs = [],
   #          libraries = libs,
   #          include_dirs = [".", "src", "src/vat", "gsl"],
   #      )
   #      ]
   # UTILS_MODULE = [
   #      Extension('spower._gsl',
   #          sources = [WRAPPER_PYGSL_C] + PY_GSL,
   #          include_dirs = [".", "src", 'gsl', 'gsl/specfunc']
   #      ),
   #      Extension('spower._boostmath',
   #          sources = [WRAPPER_PYBOOSTMATH_CPP],
   #          include_dirs = [".", "src", 'boost/math', 'boost/math/distributions']
   #      )
   #      ]
#
setup(name = "libmped",
    version = 'stable',
    description = "libmped",
    py_modules = ['LIBMPED'], # will be generated by SWIG
    ext_modules = LIBMPED_MODULE
)
